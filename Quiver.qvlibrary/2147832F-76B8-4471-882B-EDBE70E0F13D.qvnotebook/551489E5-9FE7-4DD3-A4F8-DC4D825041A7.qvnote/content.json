{
  "title": "阿尔法测试：",
  "cells": [
    {
      "type": "text",
      "data": "<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; white-space: normal;\">\n阿尔法测试：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 在用户组织模拟软件系统的运行环境下的一种验收测试，由于用户或者第三方测试公司进行的测试，模拟各种用户行为对即将面世的穿件产品进行测试，试图发现并修改错误。<br/><br/>\nbeta测试：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 用户公司组织各方面都典型终端用户在日常工作中实际使用beta版本，并要求用户报告异常情况。<br/><br/>\n需求的定义：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 1.用户为了解决问题或达到某些目标所需要的条件或者能力；<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 2.系统或系统部件为了满足合同，标准，或者其他正式文档所规定的要求而需要具备的条件或者能力；<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 3.对1或2中的一个条件或者一种能力的文档化表述。<br/><br/>\n问题：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 当实际的状况与人们期望的状况产生差距时，就产生了问题。<br/><br/>\n问题域：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 要解决问题就需要改变现实中某些实体的状态或者改变实体的状态变化的演化顺序，使其达到期望的状态或演进顺序，这些实体和状态就构成了解决问题的基本范围，称为该问题的问题域<br/><br/>\n解系统：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 软件系统通过影响问题域，能够帮助人们解决问题，称为解系统。<br/><br/>\n共享现象：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 软件系统能够与问题域进行交互和相互影响的原因在于，软件系统中的某些部分对问题域中的某些部分的具有模拟特性。<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 换句话说，软件系统当中含有问题域某些部分的模型（或模拟），常见的模型包括数据模型、对象模型、处理模型等。<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 问题域中的某些信息能够和模型中的信息建立映射关系<br/>\n这些通过映射建立的共同知识，就是问题域和解系统之间的共享现象<br/><br/>\n需求：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 用户对问题域当中的实体状态或事件的期望描述。<br/><br/>\n规格说明：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 是解系统为满足用户需求而提供的解决方案，规定了解系统的行为特征<br/>\n主要包括两个部分：<br/>\n（1）对共享现象（模型）的描述；<br/>\n（2）系统对共享现象所施加的操作的描述。<br/>\n也可以看作是一种需求<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 完全针对系统行为发出的期望<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 一种理想的、完全不需要进行任何额外努力即可以转换为系统行为的需求。<br/><br/>\n问题域自治的规律性称为问题域特性<br/><br/>\n包括结构特性和行为特性等<br/>\n问题域特性的重要性：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 要想解决问题，它就需要了解问题域特性，将解决方案和问题域特性结合起来<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 要防止解系统的引入在问题域当中引发未预见的连锁反应<br/>\n需要关注的问题域特性：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 间接特性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 约束和假设<br/><br/>\n需求的层次：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 1.业务需求：目标：解决方案与系统特性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 2.用户需求：任务：问题域知识<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 3系统级需求：系统行为：需求分析模型<br/><br/>\n软件需求的分类IEEE？<br/>\n功能需求（Functional Requirement）：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 和系统主要工作相关的需求，即在不考虑物理约束的情况下，用户希望系统所能够执行的活动，这些活动可以帮助用户完成任务。功能需求主要表现为系统和环境之间的行为交互。<br/>\n性能需求（Performance Requirement）：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 系统整体或系统组成部分应该拥有的性能特征，例如CPU使用率、内存使用率等。<br/>\n质量属性（Quality Attribute）：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 系统完成工作的质量，即系统需要在一个“好的程度”上实现功能需求，例如可靠性程度、可维护性程度等。<br/>\n对外接口（External Interface）：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 系统和环境中其他系统之间需要建立的接口，包括硬件接口、软件接口、数据库接口等等。<br/>\n约束<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 进行系统构造时需要遵守的约束，例如编程语言、硬件设施等<br/><br/><br/>\n需求路线：<br/>\n问题分析和背景分析<br/>\n需求获取<br/>\n需求分析<br/>\n文档化和验证<br/><br/>\n优秀需求的特性：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 完整性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 正确性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 精确性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 可行性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 必要性<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 无歧义<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 可验证<br/><br/>\n配置管理：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 变化源：&nbsp;&nbsp;&nbsp;<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 系统规格<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 软件规格<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设计规格说明<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 源代码<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 测试计划，<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 可操控系统。<br/>\n&nbsp;&nbsp;&nbsp;&nbsp; 活动：<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.配置的识别<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.变化控制<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.版本控制<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.auditing审计<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.状态描述<br/><br/>\na project database (repository) that stores all relevant configuration objects<br/>\n a version management capability that stores all versions of a configuration object (or enables any version to be constructed using differences from past versions);<br/>\n a make facility that enables the software engineer to collect all relevant configuration objects and construct a specific version of the software.<br/>\n an issues tracking (also called bug tracking) capability that enables the team to record and track the status of all outstanding issues associated with each configuration object.<br/><br/><br/>\n320199270<br/><br/></div>"
    }
  ]
}